## Commonly Used Functions of GitHub

GitHub provides a variety of functions to manage and collaborate on projects. Here are some of the most commonly used ones explained in plain language:

### 1. Building a Repository
- **What it means:** A repository (repo) is like a folder that contains your project, including its files and version history.
- **Purpose:** It serves as a central hub for all your project files, tracking changes made over time.

### 2. Creating Branches
- **What it means:** Branches allow you to create a separate version of your project where you can experiment without affecting the main version.
- **Purpose:** To work on new features, fix bugs, or try out ideas without disturbing the main project.

### 3. Commit
- **What it means:** A commit is like saving a snapshot of your project after making changes.
- **Purpose:** It lets you track and document the specific changes made to files.

### 4. Push
- **What it means:** Pushing means uploading your local changes to the remote GitHub repository.
- **Purpose:** To share your changes with others or keep them stored on GitHub.

### 5. Pull
- **What it means:** Pulling means downloading the latest changes from the GitHub repository to your local machine.
- **Purpose:** To ensure you have the most recent version of the project.

### 6. Merge
- **What it means:** Merging combines changes from one branch into another, like integrating a new feature into the main project.
- **Purpose:** To consolidate work done in separate branches.

### 7. Rebase
- **What it means:** Rebasing rewrites the project history by moving changes from one branch to another as if they were applied in sequence.
- **Purpose:** To create a cleaner, linear project history without multiple branching points.

---

## Commonly Used Linux/Windows Commands While Using GitHub on Terminal

Here are some frequently used commands explained in plain language:

### 1. `git init`
- **What it means:** Initializes a new Git repository in your project folder.
- **Purpose:** To start tracking your project's changes.

### 2. `git clone [repository_url]`
- **What it means:** Downloads a repository from GitHub to your local computer.
- **Purpose:** To work on an existing project locally.

### 3. `git add [file_name]` or `git add .`
- **What it means:** Stages changes in a file (or all files with `.`) to prepare for a commit.
- **Purpose:** To tell Git which changes you want to save.

### 4. `git commit -m "message"`
- **What it means:** Saves a snapshot of your staged changes with a message describing the changes.
- **Purpose:** To keep track of specific changes and their purpose.

### 5. `git status`
- **What it means:** Shows the current state of your project, including changes not staged or committed yet.
- **Purpose:** To check the status of your files before committing.

### 6. `git push origin [branch_name]`
- **What it means:** Uploads your changes from the specified branch to GitHub.
- **Purpose:** To share your updates with collaborators or store them on GitHub.

### 7. `git pull origin [branch_name]`
- **What it means:** Downloads the latest changes from GitHub for the specified branch.
- **Purpose:** To keep your local project updated.

### 8. `git merge [branch_name]`
- **What it means:** Combines the changes from another branch into your current branch.
- **Purpose:** To integrate new features or updates.

### 9. `git branch [branch_name]`
- **What it means:** Creates a new branch with the specified name.
- **Purpose:** To work on a separate version of your project.

### 10. `git log`
- **What it means:** Displays the history of commits in your repository.
- **Purpose:** To view what changes were made and when.

### 11. `git rebase [branch_name]`
- **What it means:** Applies your branchâ€™s changes on top of another branch.
- **Purpose:** To create a streamlined project history.

### 12. `git remote add origin [repository_url]`
- **What it means:** Links your local repository to a GitHub repository.
- **Purpose:** To sync your local project with GitHub.

These commands are fundamental for managing and collaborating on GitHub projects via the terminal.
